#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// #include "macros.dtsi"
// #include "behaviors.dtsi"
// #include "combos.dtsi"

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <3>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener_vert {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        y-input-code = <INPUT_REL_WHEEL>;  // vertical scroll
        y-invert;
        x-input-code = <INPUT_REL_HWHEEL>;
        bindings = <&ib_wheel_scaler 1 48>;  // vertical scroll speed
    };

    trackball_scroll_listener_horiz {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <2>;
        evt-type = <INPUT_EV_REL>;
        y-input-code = <INPUT_REL_WHEEL>;  // vertical scroll
        y-invert;
        x-input-code = <INPUT_REL_MISC>;
        bindings = <&ib_wheel_scaler 1 48>;  // vertical scroll speed
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        y-input-code = <INPUT_REL_WHEEL>;
        x-input-code = <INPUT_REL_HWHEEL>;
    };

    ib_hwheel_scaler: ib_hwheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_HWHEEL>;
    };


    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;

            // quick-tap-ms = <200>;
            // require-prior-idle-ms = <150>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 12 13 14 24 36 37 38 11 10 10 11 13 14 20 21 22 23 24>;
            hold-while-undecided;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hm_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;

            // quick-tap-ms = <200>;
            // require-prior-idle-ms = <150>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-while-undecided;
            hold-trigger-on-release;
        };

        navi_ctrl: navi_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "NAVI_CTRL";
            bindings = <&mw_ctrl>, <&sk>;

            #binding-cells = <2>;
            hold-while-undecided;
            hold-while-undecided-linger;
            tapping-term-ms = <250>;
        };

        navi_shift: navi_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "NAVI_SHIFT";
            bindings = <&mw_shft>, <&sk>;

            #binding-cells = <2>;
            hold-while-undecided;
            hold-while-undecided-linger;
            tapping-term-ms = <250>;
        };

        navi_gui: navi_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "NAVI_GUI";
            bindings = <&mw_gui>, <&sk>;

            #binding-cells = <2>;
            hold-while-undecided;
            hold-while-undecided-linger;
            tapping-term-ms = <250>;
        };

        navi_alt: navi_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "NAVI_ALT";
            bindings = <&mw_alt>, <&sk>;

            #binding-cells = <2>;
            hold-while-undecided;
            hold-while-undecided-linger;
            tapping-term-ms = <250>;
        };
    };

    macros {
        ENDASH: ENDASH {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0>,
                <&macro_release>,
                <&kp LALT>;

            label = "ENDASH";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        EMDASH: EMDASH {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1>,
                <&macro_release>,
                <&kp LALT>;

            label = "EMDASH";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        SUPER2: SUPER2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N2 &kp KP_N5 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "SUPER2";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        SUPER3: SUPER3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N9>,
                <&macro_release>,
                <&kp LALT>;

            label = "SUPER3";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        DEG: DEG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "DEG";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        mw_ctrl: mw_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LCTRL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LCTRL>;

            label = "MW_CTRL";
        };

        mw_shft: mw_shft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LSHFT>;

            label = "MW_SHFT";
        };

        mw_gui: mw_gui {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LWIN>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LWIN>;

            label = "MW_GUI";
        };

        mw_alt: mw_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2 &kp LALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2 &kp LALT>;

            label = "MW_ALT";
        };

        triple0: triple0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp N0 &kp N0 &kp N0>;

            label = "TRIPLE0";
        };

        mb3_navi: mb3_navi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1 &mkp MB3>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1 &mkp MB3>;

            label = "MB3_NAVI";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯

    #define BASE    0
    #define NAVI     1
    #define NUM_SYM     2
    #define MOUSE    3


    #define FUNC  4

    combos {
        compatible = "zmk,combos";

        LBRACKER {
            bindings = <&kp RA(N8)>;
            key-positions = <6 7>;
            layers = <3>;
        };

        RBRACKET {
            bindings = <&kp RA(N9)>;
            key-positions = <7 8>;
            layers = <3>;
        };

        LESSTHAN {
            bindings = <&kp NON_US_BSLH>;
            key-positions = <16 17>;
            layers = <3>;
        };

        MORETHAN {
            bindings = <&kp LS(NON_US_BSLH)>;
            key-positions = <17 18>;
            layers = <3>;
        };

        LBRACE {
            bindings = <&kp RA(N7)>;
            key-positions = <26 27>;
            layers = <3>;
        };

        RBRACE {
            bindings = <&kp RA(N0)>;
            key-positions = <27 28>;
        };

        ENDASH {
            bindings = <&ENDASH>;
            key-positions = <18 19>;
            layers = <3>;
        };

        EMDASH {
            bindings = <&EMDASH>;
            key-positions = <18 19 17>;
            layers = <3>;
        };

        CAPSWORD {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        SUPER2 {
            bindings = <&SUPER2>;
            key-positions = <21 22>;
            layers = <3>;
        };

        SUPER3 {
            bindings = <&SUPER3>;
            key-positions = <23 22>;
            layers = <3>;
        };

        DEG {
            bindings = <&DEG>;
            key-positions = <14 13>;
            layers = <3>;
        };

        mb2_combo {
            bindings = <&mkp MB2>;
            key-positions = <31 32>;
            layers = <0 5>;
        };

        mb3_combo {
            bindings = <&mkp MB3>;
            key-positions = <30 31>;
            layers = <0 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp SQT          &kp D            &kp U             &kp P              &kp W        &kp J      &kp K              &kp Y              &kp R             &kp SEMI
  &hm_left LALT A  &hm_left LWIN S  &hm_left LCTRL E  &hm_left LSHIFT T  &kp G        &kp H      &hm_right RSHFT N  &hm_right RCTRL I  &hm_right RWIN L  &hm_right LALT O
  &lt 5 Z          &kp X            &kp C             &kp V              &kp B        &kp F      &kp M              &kp COMMA          &kp DOT           &kp Q
                                    &lt 1 ESC         &mkp MB1           &kp SPACE    &kp RSHFT  &lt 3 ENTER
            >;
        };

        NAVI {
            bindings = <
  &none             &none             &none               &none                &none    &none      &kp HOME        &kp UP    &kp END    &kp PG_UP
  &navi_alt 0 LALT  &navi_gui 0 LWIN  &navi_ctrl 0 LCTRL  &navi_shift 0 LSHFT  &none    &kp TAB    &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &kp PG_DN
  &none             &none             &none               &none                &none    &kp ENTER  &kp BSPC        &kp DEL   &kp K_APP  &none
                                      &none               &none                &none    &none      &mo 3
            >;
        };

        SCROLL_MOD {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        NUM_SYM {
            bindings = <
  &none              &kp N7  &kp N8        &kp N9  &kp PRCNT    &kp LS(NUMBER_6)   &kp LS(N7)            &kp LS(N8)                 &kp LS(N9)            &kp LS(N0)
  &kp LS(BACKSLASH)  &kp N4  &kp N5        &kp N6  &none        &kp EQUAL          &hm_right RSHFT EXCL  &hm_right RCTRL LS(MINUS)  &hm_right RGUI SLASH  &hm_right LEFT_ALT BACKSLASH
  &kp COMMA          &kp N1  &kp N2        &kp N3  &none        &kp RIGHT_BRACKET  &kp RA(MINUS)         &kp RA(NUMBER_2)           &kp LS(SLASH)         &kp LS(N2)
                             &lt 1 PERIOD  &kp N0  &kp ENTER    &none              &none
            >;
        };

        FUNC {
            bindings = <
  &none     &hm_left C_RW C_PREV  &kp C_PP    &hm_left C_FF C_NEXT  &bt BT_NXT      &none       &kp F1  &kp F2   &kp F3   &kp F4
  &kp LALT  &kp LGUI              &kp LCTRL   &kp LSHFT             &bt BT_CLR      &kp CAPS    &kp F5  &kp F6   &kp F7   &kp F8
  &none     &kp C_VOL_DN          &kp C_MUTE  &kp C_VOL_UP          &out OUT_TOG    &kp KP_NUM  &kp F9  &kp F10  &kp F11  &kp F12
                                  &none       &none                 &none           &none       &none
            >;
        };

        SNIPE {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        FUNC {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};













